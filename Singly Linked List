import java.util.* ;

class llist
{
    
    Node head;
    
    private int size;
    
    llist() {
        this.size = 0 ;
    }

    class Node{
        Object data ;
        Node next ;
        
        Node(Object data){
            this.data = data ;
            this.next = null ;
            size++ ;
        }
    }
    
    
    //add first
    public void addFirst(Object data){
        Node newNode = new Node(data);
        if(head == null){
            head = newNode ;
            return ;
        }
        
        newNode.next = head ;
        head = newNode ;
    }
    
    
    //add last
    public void addLast(Object data){
        Node newNode = new Node(data);
        if(head == null){
            head = newNode ;
            return ;
        }
        
        Node currNode = head ;
        while(currNode.next != null){
            currNode = currNode.next ;
        }
        currNode.next = newNode ;
    }
    
    
    //delete first
	public void deleteFirst(){
	    if(head == null){
	        System.out.println("The list is empty");
	        return;
	    }
	    
	    size-- ;
	    head = head.next ;
	}
	
	
	void checkIndex(int index)
    {
        if (index < 0 || index >= size){
            throw new IndexOutOfBoundsException
            ("index = " + index + " size = " + size);
        }    

    }
	
	
	//delete last
	public void deleteLast(){
	    if(head == null){
	        System.out.println("The list is empty");
	        return;
	    }
	    
	    size-- ;
	    if(head.next == null){
	        head = null;
	        return;
	    }
	    
	    Node secondLast = head;
	    Node lastNode = head.next;
	    while(lastNode.next != null){
	        lastNode = lastNode.next;
	        secondLast = secondLast.next ;
	    }
	    
	    secondLast.next = null ;
	}
	
	
	//print List
	public void printList(){
	    if(head == null){
	        System.out.println("list is empty");
	        return;
	    }
	    
	    Node currNode = head ;
        while(currNode != null){
            System.out.print(currNode.data + " -->> ");
            currNode = currNode.next ;
        }
        
        System.out.println("NULL"); 
	}
	
	
	public int getSize() {
	    return size ;
	}
	
	
	public int indexOf(Object data)
    {
        Node currentNode = head ;
        int index = 0; 
        
        while (currentNode != null && !currentNode.data.equals(data))
        {
            currentNode = currentNode.next;
            index++;
        }
        
        if(currentNode == null){
            return -1;
        }else{
            return index;
        }
    }    
	
	
	//reverse
	public void reverseIterate() {
	    if(head == null || head.next == null){
	        return ;
	    }
	    Node prevNode = head ;
	    Node currNode = head.next ;
	    while(currNode != null){
	        Node nextNode = currNode.next ;
	        currNode.next = prevNode ;
	        
	        //update
	        prevNode = currNode ;
	        currNode = nextNode ;
	    }
	    head.next = null ;
	    head = prevNode ;
	}
}

public class Main{
	
	public static void main(String[] args) {
		llist list = new llist();
		list.addFirst("Book");
		list.printList();
		list.addFirst("Cat");
		list.printList();
		list.addLast("Tomato");
		list.printList();
		list.addFirst("2412");
		list.printList();
		list.addFirst("Rohan");
		list.printList();
		
		list.deleteFirst();
		list.printList();
		
		list.deleteLast();
		list.printList();
		System.out.println(list.getSize());
		
		list.reverseIterate() ;
		list.printList() ;
		System.out.println(list.getSize());
	}
}
